# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
resources:
  pipelines:
  - pipeline: golang-web   # Internal name of the source pipeline, used elsewhere within app-ci YAML                         # e.g. to reference published artifacts
    source: golang-webapp # Azure Pipelines name of the source pipeline referenced
    project: golang-webapp # Required only if the source pipeline is in another project
    trigger: true # Run app-ci pipeline when any run of security-lib-ci completes

trigger:
  - main
  
pool:
    vmImage: ubuntu-latest
  
stages:
      - stage: "Installing_Packer"
        displayName: Packer
        jobs: 
          - job: install
            steps:
              - bash: |
                  ls -lrt
                  pwd 
              - bash: sh packer_setup.sh
      - stage: "Building_image"
        displayName: Build
        jobs: 
          - job: build
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  buildType: 'specific'
                  project: 'ac00ecf6-fd0e-491e-be0c-a5f0b3ba47d9'
                  definition: '9'
                  buildVersionToDownload: 'latest'
                  artifactName: 'WebAppgolang'
                  targetPath: '$(System.DefaultWorkingDirectory)'
              - task: "AzureKeyVault@2"
                inputs:
                  connectedServiceName: 'kv_read'
                  KeyVaultName: 'azure-key-pair-new'
                  SecretsFilter: '*'
                  RunAsPreJob: false
              - bash: |
                  ls -lart
              


              - bash: |
                  packer build -var "az_client_secret=$env_client_secret" -var "aws_sub_kid=$env_sub_id" -var "image=$env_imagename" -var "build=$env_build" ubuntu.json
                env:
                    env_client_secret: $(client-secret)
                    env_sub_id: $(sub-id) 
                    env_imagename: $(System.TeamProject)
                    env_build: $(Build.BuildId)
                  
